import "std/fungible_token_interface"

// Defines a contract named `TokenFaucet`.
// A contract is a collection of fields (its state) and functions.
// Once deployed, a contract resides at a specific address on the Alephium blockchain.
// Contract fields are permanently stored in contract storage.
// A contract can issue an initial amount of token at its deployment.
Contract TestToken(
    symbol: ByteVec,
    name: ByteVec,
    decimals: U256,
    mut supply: U256
) implements IFungibleToken {

    // Events allow for logging of activities on the blockchain.
    // Alephium clients can listen to events in order to react to contract state changes.
    event Mint(to: Address, amount: U256)

    enum ErrorCodes {
        InvalidMintAmount = 0
    }

    // A public function that returns the initial supply of the contract's token.
    // Note that the field must be initialized as the amount of the issued token.
    pub fn getTotalSupply() -> U256 {
        return supply
    }

    // A public function that returns the symbol of the token.
    pub fn getSymbol() -> ByteVec {
        return symbol
    }

    // A public function that returns the name of the token.
    pub fn getName() -> ByteVec {
        return name
    }

    // A public function that returns the decimals of the token.
    pub fn getDecimals() -> U256 {
        return decimals
    }

    // A public function that transfers tokens to anyone who calls it.
    // The function is annotated with `updateFields = true` as it changes the contract fields.
    // The function is annotated as using contract assets as it does.
    // The function is annotated with `checkExternalCaller = false` as there is no need to check the external caller.
    @using(assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn mint(amount: U256) -> () {
        // Make sure the amount is valid

        let maxSupply = 1000000000000000000000000

        assert!(amount + supply <= maxSupply, ErrorCodes.InvalidMintAmount)
        // Functions postfixed with `!` are built-in functions.
        transferTokenFromSelf!(callerAddress!(), selfTokenId!(), amount)
        supply = supply + amount

        // Emit the event defined earlier.
        emit Mint(callerAddress!(), amount)
    }
}
