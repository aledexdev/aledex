/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as RouterContractJson } from "../Router.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace RouterTypes {
  export type State = Omit<ContractState<any>, "fields">;
  export type AddLPEvent = ContractEvent<{
    sender: Address;
    tokenPair: HexString;
    amount0: bigint;
    amount1: bigint;
    liquidity: bigint;
  }>;
  export type RemoveLPEvent = ContractEvent<{
    sender: Address;
    tokenPair: HexString;
    liquidity: bigint;
  }>;
}

class Factory extends ContractFactory<RouterInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, []);
  }

  eventIndex = { AddLP: 0, RemoveLP: 1 };
  consts = {
    ErrorCodes: {
      InsufficientOutputAmount: BigInt(9),
      InsufficientInputAmount: BigInt(10),
      Expired: BigInt(12),
      InsufficientToken0Amount: BigInt(13),
      InsufficientToken1Amount: BigInt(14),
    },
  };

  at(address: string): RouterInstance {
    return new RouterInstance(address);
  }

  tests = {
    addLiquidity_: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            reserve0: bigint;
            reserve1: bigint;
            amount0Desired: bigint;
            amount1Desired: bigint;
            amount0Min: bigint;
            amount1Min: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(this, "addLiquidity_", params);
    },
    addLiquidity: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            tokenPair: HexString;
            sender: Address;
            amount0Desired: bigint;
            amount1Desired: bigint;
            amount0Min: bigint;
            amount1Min: bigint;
            deadline: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addLiquidity", params);
    },
    removeLiquidity: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            tokenPairId: HexString;
            sender: Address;
            liquidity: bigint;
            amount0Min: bigint;
            amount1Min: bigint;
            deadline: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "removeLiquidity", params);
    },
    getReserveInAndReserveOut: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { tokenPair: HexString; tokenInId: HexString }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(this, "getReserveInAndReserveOut", params);
    },
    swapExactTokenForToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            tokenPair: HexString;
            sender: Address;
            tokenInId: HexString;
            amountIn: bigint;
            amountOutMin: bigint;
            to: Address;
            deadline: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "swapExactTokenForToken", params);
    },
    swapTokenForExactToken: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            tokenPair: HexString;
            sender: Address;
            tokenInId: HexString;
            amountInMax: bigint;
            amountOut: bigint;
            to: Address;
            deadline: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "swapTokenForExactToken", params);
    },
    swap: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            tokenPair: HexString;
            sender: Address;
            to: Address;
            tokenInId: HexString;
            amountIn: bigint;
            amountOut: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "swap", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Router = new Factory(
  Contract.fromJson(
    RouterContractJson,
    "",
    "e5cda4b9332f133770686c294e88896ea2d8c9991014a59f78e15ffb316987ce",
    []
  )
);

// Use this class to interact with the blockchain
export class RouterInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<RouterTypes.State> {
    return fetchContractState(Router, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAddLPEvent(
    options: EventSubscribeOptions<RouterTypes.AddLPEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Router.contract,
      this,
      options,
      "AddLP",
      fromCount
    );
  }

  subscribeRemoveLPEvent(
    options: EventSubscribeOptions<RouterTypes.RemoveLPEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Router.contract,
      this,
      options,
      "RemoveLP",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      RouterTypes.AddLPEvent | RouterTypes.RemoveLPEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Router.contract, this, options, fromCount);
  }
}
